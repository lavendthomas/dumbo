programme: txt | txt programme | dumbo_bloc | dumbo_bloc programme
txt: /[a-zA-Z0-9 _;&<>"-.:\\,\n]+/
dumbo_bloc: "{{" expressions_list "}}"
expressions_list: ( expression ";" expressions_list )
                | ( expression ";" )

expression: expression_print
          | expression_for_0
          | expression_for_1
          | expression_assign

expression_print   : "print" string_expression
expression_print_b : "print!" string_expression
expression_for_0   : "for" variable_set "in" string_list "do" expressions_list "endfor"
expression_for_1   : "for" variable_set "in" variable_get "do" expressions_list "endfor"
expression_assign  : variable_set ":=" string_expression
                   | variable_set ":=" string_list
                   | variable_set ":=" test
expression_if      : "if" test "do" expressions_list "endif"

string_expression: string
                 | variable_get_str
                 | string_concat
string_concat: string_expression "." string_expression

string_list: "(" string_list_interior ")"
string_list_interior: string "," string_list_interior | string

test : and_test ("or" and_test)*        //or_test
and_test: not_test ("and" not_test)*
not_test: invert_test
        | comparison
        | boolean

invert_test: "not" not_test

comparison: arithm_expr (OPERATOR arithm_expr)*

arithm_expr: term (ADD_OP term)*
term: factor (MULT_OP factor)*
factor: integer | variable_get


ADD_OP : "+" | "-"
MULT_OP: "*" | "/"

BOOLEAN: "true" | "false"

OPERATOR: "="
        | "<"
        | "<="
        | ">"
        | ">="
        | "!="

integer : NUMBER
boolean : BOOLEAN

string  : STRING
variable_get_str: VARIABLE_STR
variable_get: VARIABLE      // We handle these two variable uses
variable_set: TYPE VARIABLE      // differently


TYPE    : "int" | "str" | "list" | "bool"

VARIABLE_STR: /[a-zA-Z0-9_]+/
VARIABLE    : /[a-zA-Z0-9_]+/
//STRING    : /'[a-zA-Z0-9 _;&<>"-.:,]+'/
STRING      : /'[a-zA-Z0-9_ <>]+'/

%import common.NUMBER
%import common.WORD

%ignore /[ \n]/